// Generated by CoffeeScript 1.4.0
(function() {

  $(document).ready(function() {
    var Block, Tile, b, gridMid, gridh, gridw;
    gridw = 12;
    gridh = 20;
    gridMid = gridw / 2;
    Tile = (function() {

      function Tile() {}

      Tile.tilew = Tile.tileh = 20;

      Tile.canvas = canvasInfo;

      Tile.tile = new Array(gridh);

      Tile.initTile = function() {
        var i, j, row, _i, _results;
        _results = [];
        for (i = _i = 0; 0 <= gridh ? _i < gridh : _i > gridh; i = 0 <= gridh ? ++_i : --_i) {
          row = new Array(gridw);
          this.tile[i] = row;
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (j = _j = 0; 0 <= gridw ? _j < gridw : _j > gridw; j = 0 <= gridw ? ++_j : --_j) {
              _results1.push(this.tile[i][j] = {
                x: this.canvas.sx + j * this.tilew,
                y: this.canvas.sy + i * this.tileh,
                fill: false
              });
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      Tile.eachTile = function(fun) {
        var i, j, _i, _results;
        _results = [];
        for (i = _i = 0; 0 <= gridh ? _i < gridh : _i > gridh; i = 0 <= gridh ? ++_i : --_i) {
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (j = _j = 0; 0 <= gridw ? _j < gridw : _j > gridw; j = 0 <= gridw ? ++_j : --_j) {
              _results1.push(fun.call(this, this.tile[i][j]));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      Tile.drawTile = function() {
        return this.eachTile(function(tile) {
          return this.canvas.ctx().strokeRect(tile.x, tile.y, this.tilew, this.tileh);
        });
      };

      return Tile;

    })();
    Block = (function() {

      Block.BlockType = ["straight4", "left3", "right3", "all3", "left2", "right2", "all2"];

      Block.randomBlock = function() {
        var num;
        num = Math.floor(Math.random() * 7);
        return this.BlockType[num];
      };

      Block.prototype.straight4 = function() {
        var co, n, _i, _len, _ref, _results;
        this.first = [0, gridMid];
        this.last = [3, gridMid];
        this.all = (function() {
          var _i, _results;
          _results = [];
          for (n = _i = 0; _i <= 3; n = ++_i) {
            _results.push([n, gridMid]);
          }
          return _results;
        })();
        _ref = this.all;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          co = _ref[_i];
          _results.push(Tile.tile[co[0]][co[1]].fill = true);
        }
        return _results;
      };

      Block.prototype.initBlock = function() {
        switch (this.type) {
          case "straight4":
            return this.straight4();
        }
      };

      function Block(num) {
        if (num != null) {
          this.type = this.constructor.BlockType[num];
        } else {
          this.type = this.constructor.randomBlock();
        }
        this.initBlock();
      }

      Block.prototype.draw = function(colour) {
        var co, ctx, _i, _len, _ref, _results;
        if (colour == null) {
          colour = "rgb(0,255,0)";
        }
        ctx = Tile.canvas.ctx();
        ctx.fillStyle = colour;
        _ref = this.all;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          co = _ref[_i];
          _results.push(ctx.fillRect(Tile.tile[co[0]][co[1]].x, Tile.tile[co[0]][co[1]].y, Tile.tilew, Tile.tileh));
        }
        return _results;
      };

      Block.prototype.down = function() {
        var co, _i, _len, _ref, _results;
        this.draw("rgb(255,255,255)");
        _ref = this.all;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          co = _ref[_i];
          Tile.tile[co[0]][co[1]].fill = false;
          co[0] += 1;
          _results.push(Tile.tile[co[0]][co[1]].fill = true);
        }
        return _results;
      };

      return Block;

    })();
    Tile.initTile();
    b = new Block(0);
    window.Tile = Tile;
    return window.Block = Block;
  });

  $(document).ready(function() {
    return $("canvas").keydown(function(e) {
      return alert(e.which);
    });
  });

}).call(this);
